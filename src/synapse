#!/usr/bin/env python

import pygtk
pygtk.require("2.0")
import gtk
import os
import time
import datetime
import gobject
import goocanvas
import getpass


import sys
sys.path.append("/usr/lib/synapse")
from synapseObjects import *
import synapseCanvas
from synapseCanvas import *
from synapseCanvas import motion_notify
from synapseIMVEC import *
from synapsePkg import *
from synapseUtils import *
import pickle



import signal
import threading

#Global variables definition

### 

RES_PATH = "/usr/share/synapse"
GOO_COORD= list()
TARGET_TYPE_PIXMAP = 81
 
LS0 = gtk.ListStore(gtk.gdk.Pixbuf,gobject.TYPE_STRING)
RENDERER0 =  gtk.CellRendererPixbuf()
RENDERER1 = gtk.CellRendererText()
C0= gtk.TreeViewColumn(None,RENDERER0,pixbuf=0)
C1= gtk.TreeViewColumn(None,RENDERER1,text=1)


class thwrapper(threading.Thread):

 
   def setMethod(self,method):
      self.method = method   

   def run(self):
      self.method()



#class that defines the synapse document structure and 
# manipulation methods
class document(object):

   TARGET_TYPE_TEXT = 80
   TARGET_TYPE_PIXMAP = 81
   fromImage = [ ( "text/plain", 0, TARGET_TYPE_TEXT ),
              ( "image/x-xpixmap", 0, TARGET_TYPE_PIXMAP ) ]
   toButton = [ ( "text/plain", 0, TARGET_TYPE_TEXT ) ]
   toCanvas = [ ( "image/x-xpixmap", 0, TARGET_TYPE_PIXMAP ) ]

   nbinst = 0
   nbnewinst = 0



   def updateHeaderInfos(self):

      self.header.getSynItem().setWorkflowAuthor(self.header.getSynObj().getAuthor())
      self.header.getSynItem().setWorkflowTitle(self.header.getSynObj().getTitle())
      self.header.getSynItem().setWorkflowCreationDate(self.header.getSynObj().getDate())
      self.header.getSynItem().setWorkflowDescr(self.header.getSynObj().getDescr())


   def updateDocProperties(self,docprops):

      self.color = docprops[0]
      self.width = docprops[1]
      self.height = docprops[2]

      self.onResize(None)

      if self.color != "DEFAULT":
         self.rect.set_property("fill_color",self.color)

      
   def setHeadLabel(self,text):

      self.head_label.set_text(text)

   def refresh_objects_list(self):

      global LS0
      global SYNAPP_ICON
      global C0
      global C1

      LS0.clear()
      for obj in IMVEC.activeDoc.getContainer().getSynObjects():
  
         # Dirty, replace by dict()
         if (str(obj.__class__) == "synapseObjects.synapp"):         
            pixbuf = IMVEC.appPixbuf_s
         elif (str(obj.__class__) == "synapseObjects.syntest"):
            pixbuf = IMVEC.testPixbuf_s
         elif (str(obj.__class__) == "synapseObjects.syntimer"):
            pixbuf = IMVEC.timerPixbuf_s
         elif (str(obj.__class__) == "synapseObjects.synserv"):
            pixbuf = IMVEC.servPixbuf_s
         elif (str(obj.__class__) == "synapseObjects.synmux"):
            pixbuf = IMVEC.muxPixbuf_s 
         elif (str(obj.__class__) == "synapseObjects.syndemux"):
            pixbuf = IMVEC.demuxPixbuf_s 
         elif (str(obj.__class__) == "synapseObjects.synjector"):
            pixbuf = IMVEC.injectorPixbuf_s
         elif (str(obj.__class__) == "synapseObjects.syncom"):
            pixbuf = IMVEC.commentPixbuf_s
         elif (str(obj.__class__) == "synapseObjects.synmonitor"):
            pixbuf = IMVEC.monitorPixbuf_s
         elif (str(obj.__class__) == "synapseObjects.synfilter"):
            pixbuf = IMVEC.filterPixbuf_s
         elif (str(obj.__class__) == "synapseObjects.synlink"):
            pixbuf = IMVEC.linkPixbuf_s
         elif (str(obj.__class__) == "synapseObjects.synserv"):
            pixbuf = IMVEC.servPixbuf_s
         elif (str(obj.__class__) == "synapseObjects.syncontainer"):
            pixbuf = IMVEC.containerPixbuf_s
         elif (str(obj.__class__) == "synapseObjects.synreport"):
            pixbuf = IMVEC.reportPixbuf_s
         elif (str(obj.__class__) == "synapseObjects.synlabel"):
            pixbuf = IMVEC.labelPixbuf_s



         iter = LS0.append()
         LS0.set(iter,0,pixbuf,1,obj.getName())

      IMVEC.obrowser.append_column(C0)
      IMVEC.obrowser.append_column(C1)
      IMVEC.obrowser.set_model(LS0)


   def loadFromFile(self,sws_file):

      return True


   def saveToFile(self,sws_file):

      for obj in objectsList:

         print obj.getName()
         
      
   def on_closebtn_clicked(self,widget):
      
 
      self.notebook.remove_page(self.notebook.page_num(widget))
 
  
   def receiveCallback(self, widget, context, x, y, selection, targetType,time):


      print "DROPPED:", context.get_source_widget().get_name()

     
      if (context.get_source_widget().get_name() == "synapp_btn"):

         self.nbsynapp+=1
         newobj = synapp("Application%d" % (self.nbsynapp) )
         newitem = synappItem(self.root)
         self.container.append(linker(newobj,newitem))

         newitem.getO().set_property("x",x)
         newitem.getO().set_property("y",y)
         newitem.setText("Application%d" % (self.nbsynapp))

         self.refresh_objects_list()
      

      elif (context.get_source_widget().get_name() == "syntest_btn"):

         self.nbsyntest+=1
         newobj = syntest("Test%d" % (self.nbsyntest) )
         newitem = testItem(self.root)
         self.container.append(linker(newobj,newitem))
         
         newitem.getO().set_property("x",x)
         newitem.getO().set_property("y",y)
         newitem.setText("Test%d" % (self.nbsyntest))
         self.refresh_objects_list()



      elif (context.get_source_widget().get_name() == "synserv_btn"):
         
         self.nbservices+=1
         newobj = synserv("Service%d" % (self.nbservices) )
         newitem = servItem(self.root)
         self.container.append(linker(newobj,newitem))
         
         newitem.getO().set_property("x",x)
         newitem.getO().set_property("y",y)
         newitem.setText("Service%d" % (self.nbservices))
         self.refresh_objects_list()
         

      elif (context.get_source_widget().get_name() == "synject_btn"):

         self.nbinjectors+=1
         newobj = synjector("Injector%d" % (self.nbinjectors))
         newitem = injectorItem(self.root)
         self.container.append(linker(newobj,newitem))         

         newitem.getO().set_property("x",x)
         newitem.getO().set_property("y",y)
         newitem.setText("Injector%d" % (self.nbinjectors))
        
         self.refresh_objects_list()


      elif (context.get_source_widget().get_name() == "syncom_btn"):

         self.nbcomments+=1
         newobj = syncom("Comment%d" % (self.nbcomments),"This is a comment box")
         newitem = commentItem(self.root)
         self.container.append(linker(newobj,newitem))

         newitem.getO().set_property("x",x)
         newitem.getO().set_property("y",y)

         self.refresh_objects_list()     

      elif (context.get_source_widget().get_name() == "synmux_btn"):

         self.nbmuxers+=1
         newobj = synmux("Muxer%d" % (self.nbmuxers))
         newitem = muxItem(self.root)         
         self.container.append(linker(newobj,newitem))
         
         newitem.getO().set_property("x",x)
         newitem.getO().set_property("y",y)
         newitem.setText("Muxer%d" % (self.nbmuxers))
         self.refresh_objects_list() 

      elif (context.get_source_widget().get_name() == "syndemux_btn"):

         self.nbdemuxers+=1
         newobj = syndemux("Demuxer%d" % (self.nbdemuxers))
         newitem = demuxItem(self.root)
         self.container.append(linker(newobj,newitem))

         newitem.getO().set_property("x",x)
         newitem.getO().set_property("y",y)
         newitem.setText("Demuxer%d" % (self.nbdemuxers))

         self.refresh_objects_list()

      elif (context.get_source_widget().get_name() == "syntimer_btn"):

         self.nbtimers+=1
         newobj = syntimer("Timer%d" % (self.nbtimers))
         newitem = timerItem(self.root)
         self.container.append(linker(newobj,newitem))         

         newitem.getO().set_property("x",x)
         newitem.getO().set_property("y",y)
         newitem.setText("Timer%d" % (self.nbtimers))

         self.refresh_objects_list()


      elif (context.get_source_widget().get_name() == "synfilter_btn"):

         self.nbfilters+=1
         newobj = synfilter("Filter%d" % (self.nbfilters))
         newitem = filterItem(self.root)
         self.container.append(linker(newobj,newitem))         

         newitem.getO().set_property("x",x)
         newitem.getO().set_property("y",y)
         newitem.setText("Filter%d" % (self.nbfilters))

         self.refresh_objects_list()


      elif (context.get_source_widget().get_name() == "synmon_btn"):

         self.nbmonitors+=1
         newobj = synmonitor("Monitor%d" % (self.nbmonitors))
         newitem = monitorItem(self.root)
         self.container.append(linker(newobj,newitem))         

         newitem.getO().set_property("x",x)
         newitem.getO().set_property("y",y)
         #newitem.setText("Monitor%d" % (self.nbfilters))

         self.refresh_objects_list()


      elif (context.get_source_widget().get_name() == "syncontainer_btn"):

         self.nbcontainers+=1
         newobj = syncontainer("Container%d" % (self.nbcontainers))
         newitem = containerItem(self.root)
         nlinker = linker(newobj,newitem)
         self.container.append(nlinker)
         self.syncontainersList.append(nlinker)
        

         newitem.getO().set_property("x",x)
         newitem.getO().set_property("y",y)
         newitem.setText("Container%d" % (self.nbcontainers))

         self.refresh_objects_list()


      elif (context.get_source_widget().get_name() == "synreport_btn"):

         self.nbreports+=1
         newobj = synreport("Report%d" % (self.nbreports))
         newitem = reportItem(self.root)
         self.container.append(linker(newobj,newitem))

         newitem.getO().set_property("x",x)
         newitem.getO().set_property("y",y)
         newitem.setText("Report%d" % (self.nbreports))

         self.refresh_objects_list()

    
      elif (context.get_source_widget().get_name() == "synlabel_btn"):

         self.nblabels+=1
         newobj = synlabel("Label%d" % (self.nblabels))
         newitem = labelItem(self.root)
         self.container.append(linker(newobj,newitem))

         newitem.getO().set_property("x",x)
         newitem.getO().set_property("y",y)
         newitem.setText("Label%d" % (self.nblabels))

         self.refresh_objects_list()



       
   def zoomOut(self):
      
      if (self.zoom == 0.5): 
         self.zoom = 0.25
      elif (self.zoom == 1):
         self.zoom = 0.5
      elif (self.zoom > 1):
         self.zoom-=1

      self.applyZoom()

   def zoomIn(self):
      
      if (self.zoom < 1): 
         self.zoom = 1
      elif (self.zoom < 4):
         self.zoom+=1
      self.applyZoom()  


   def getColor(self):
      return self.color

   def getWidth(self):
      return self.width

   def getHeight(self):
      return self.height


   def setZoom(self,zoom):
      self.zoom = zoom
     
   def getZoom(self):

      return self.zoom

   def applyZoom(self):
      
      nwidth = int(self.root.get_property("width") * self.zoom)
      nheight = int(self.root.get_property("height") * self.zoom)
      
      #print "ROOT_W: %d\nROOT_H: %d\nW_INT: %d\nH_INT: %d" % (self.root.get_property("width"),self.root.get_property("height"),nwidth,nheight)

      self.root.set_simple_transform(0,0,self.zoom,0)
      self.canvas.set_size_request(nwidth,nheight)
      self.canvas.set_bounds(0, 0,nwidth,nheight)

    
   def getCR(self):

      return self.cairo_context

   def getSyncontainersList(self):

      return self.syncontainersList

   def getContainer(self):

      return self.container  

   def getActiveM(self):
      return self.activeMember

   def getPrevM(self):
      return self.prevMember 
   
   def setActiveM(self,activeMember):
      
      if self.activeMember != None:
         self.prevMember = self.activeMember
      self.activeMember = activeMember
      

   def setPrevM(self,prevMember):
      self.prevMember = prevMember


   def setSavedName(self,savedName):
      self.savedName = savedName
   def setPath(self,path):
      self.path = path



   def setnbInsts(self,nbinsts):

      (self.nbsynapp,self.nbsyntest,self.nbcomments,self.nbmuxers,self.nbdemuxers,self.nbinjectors,
      self.nbtimers,self.nbfilters,self.nbmonitors,self.nbservices) = tuple(nbinsts)


   def onResize(self,widget):

      if widget == documentGTK.iwidth:

         try:
            if int(documentGTK.iwidth.get_text()) >= 500:

               self.width = int(documentGTK.iwidth.get_text())        
         except:
            pass

      elif widget == documentGTK.iheight:

         try:
       
            if int(documentGTK.iheight.get_text()) >= 500:

               self.height = int(documentGTK.iheight.get_text())
         except:
            pass
         
      self.canvas.set_size_request(self.width,self.height)
      self.canvas.set_bounds(0, 0,self.width,self.height)
      self.rect.set_property("width",self.width)
      self.rect.set_property("height",self.height)

      self.root.set_property("width",self.width)
      self.root.set_property("height",self.height)

      IMVEC.activeDoc.getHeader().getSynItem().redim()


   def onColorChange(self,widget):

      colorseldlg = gtk.ColorSelectionDialog('Choose a Document Color')
      colorsel = colorseldlg.colorsel

      response = colorseldlg.run()
   	
      if response == gtk.RESPONSE_OK:
        ncolor = colorsel.get_current_color()
        self.color = resclaleColorSel(ncolor.to_string())
        documentGTK.icolor.set_text(self.color)
        self.rect.set_property("fill_color",self.color)
        colorseldlg.destroy()
      elif response == gtk.RESPONSE_CANCEL:
        colorseldlg.destroy()


   def getPropWidget(self):

      documentGTK.iwidth.set_text(str(self.width))
      documentGTK.iheight.set_text(str(self.height))
      documentGTK.icolor.set_text(self.color)

      #connect just once
      if len(documentGTK.chdict) == 0: 

         documentGTK.chdict['icolorBtn'] = documentGTK.icolorBtn.connect("clicked",self.onColorChange)
         documentGTK.chdict['iwidth'] = documentGTK.iwidth.connect("changed",self.onResize)
         documentGTK.chdict['iheight'] = documentGTK.iheight.connect("changed",self.onResize)

      return documentGTK.o

   def disconnectAll(self):

      return None



   def getSelObject(self):

      return self.selobject

   def on_bg_released(self,item,target,event):

      if self.selobject != None:

         (x_sel,y_sel) = getAbsoluteCoords(IMVEC.activeDoc.getRootItem(),self.selobject.getSynItem().getMF(),0,0)
         width_sel = self.selobject.getSynItem().getMF().get_property("width")
         height_sel = self.selobject.getSynItem().getMF().get_property("height")

         for item in IMVEC.activeDoc.getContainer().getSynItems():

            if (item.getO().get_property("parent") == IMVEC.activeDoc.getRootItem() ):

               (x_item,y_item) = getAbsoluteCoords(IMVEC.activeDoc.getRootItem(),item.getMF(),0,0)
               width_item = item.getMF().get_property("width")
               height_item  = item.getMF().get_property("height")

               if ( x_sel <= x_item \
               and y_sel <= y_item \
               and width_sel >= (width_item + (x_item - x_sel) )  \
               and  height_sel >= (height_item + (y_item - y_sel) ) ):


                  item.getO().set_property("parent",self.selobject.getSynItem().getO())
                  item.getMF().set_property("stroke_color","#00FF00")
                  self.selobject.getSynObj().getSelectedItems().append(item)
       
                  item.disconnectMF()
                  item.getMF().connect("button-press-event",self.selobject.getSynItem().on_mf_clicked )
                  try:
                     item.getIcon().connect("button-press-event",self.selobject.getSynItem().on_mf_clicked )
                  except:
                     pass
                     #to handle case where bb has no icon

                  print IMVEC.activeDoc.getContainer().getMemberFromSynItem(item).getSynObj().getName()



         if self.selobject.getSynObj().isEmpty() :
            self.root.remove_child(self.selobject.getSynItem().getO())
            self.selobject = None
         else:
            self.selobject.getSynItem().getO().remove_child(self.selobject.getSynItem().getMF())

         print "x_sel:%d\ny_sel:%d\nwidth_sel:%d\nheight_sel:%d\n" % (x_sel,y_sel,width_sel,height_sel)


     
   def on_bg_clicked(self,item,target,event):

      try:
         if str(IMVEC.activeDoc.getActiveM().getSynObj().__class__) != "synapseObjects.synlink":
            IMVEC.activeDoc.getActiveM().getSynItem().getMF().set_property("stroke_color","#cccccc")
         elif IMVEC.activeDoc.getActiveM().getSynObj().getBidir() == False:
            IMVEC.activeDoc.getActiveM().getSynItem().getMF().set_property("stroke_color","#000000")
         else:
            IMVEC.activeDoc.getActiveM().getSynItem().getMF().set_property("stroke_color","#00cbFF")

      except:
         pass
      

      for child in IMVEC.oprop.get_nth_page(0).get_children():
         IMVEC.oprop.get_nth_page(0).remove(child)
      IMVEC.oprop.get_nth_page(0).add(self.getPropWidget())

      # create new selection object

      if self.selobject != None and not self.selobject.getSynObj().isEmpty():
         self.selobject.getSynObj().unselect()

      self.selobject = linker(synsel(),selItem(self.root))

          
   def getSyncontainersList(self):

      return self.syncontainersList


   def __init__(self,name,notebook):
      
      document.nbinst+=1

      IMVEC.docList.append(self)

      self.name = name

      self.color = "DEFAULT"
      self.width = 1024
      self.height = 1024

      self.selobject = None

      
      #define a new empty objects container
      self.container = container()

      self.syncontainersList = list()


      self.activeMember = None
      self.prevMember = None


      self.saved = False
      self.modified = False
      self.savedName = ""
      self.path = ""

      self.notebook = notebook      

      self.nbsynapp = 0
      self.nbsyntest = 0
      self.nbmux = 0
      self.nbcomments = 0
      self.nbmuxers = 0
      self.nbdemuxers = 0
      self.nbinjectors = 0
      self.nbtimers = 0
      self.nbfilters=0
      self.nbmonitors = 0
      self.nbservices = 0
      self.nbcontainers = 0
      self.nbreports = 0
      self.nblabels = 0
      self.zoom = 1
      
      
      

      self.head_hbox = gtk.HBox()
      self.head_label = gtk.Label(str=self.name)
      self.head_label.show()
      self.close_btn = gtk.Button()

      close_image = gtk.image_new_from_stock(gtk.STOCK_CLOSE, gtk.ICON_SIZE_MENU)
      close_image.show()
      

      self.close_btn.connect("clicked",self.on_closebtn_clicked)
      self.close_btn.add(close_image)
      self.close_btn.show()
      self.head_hbox.add(self.head_label)
      self.head_hbox.add(self.close_btn)


      scrolled_win = gtk.ScrolledWindow() 
      view_port = gtk.Viewport()
      
      self.canvas = goocanvas.Canvas()
  

      self.canvas.add_events(gtk.gdk.MOTION_NOTIFY | gtk.gdk.BUTTON_PRESS)
      self.canvas.connect("motion_notify_event", motion_notify)
      #self.canvas.connect('drag_motion', self.on_drag_motion)
           
      self.canvas.connect("drag_data_received", self.receiveCallback)      
      self.canvas.drag_dest_set(gtk.DEST_DEFAULT_MOTION |
                             gtk.DEST_DEFAULT_HIGHLIGHT |
                             gtk.DEST_DEFAULT_DROP,
                             self.toButton, gtk.gdk.ACTION_COPY)




    
      self.canvas.set_size_request(self.width,self.height)
      self.canvas.set_bounds(0, 0,self.width, self.height)

      self.cairo_context = None

      self.root = self.canvas.get_root_item()
      self.rect = goocanvas.Rect(parent=self.root,x=0, y=0, width=self.width, height=self.height,
				stroke_color="black", fill_color="white",
				line_width=0)

      self.rect.connect("button-press-event",self.on_bg_clicked)
      self.rect.connect("button-release-event",self.on_bg_released)

      self.root.set_property("width",self.width)
      self.root.set_property("height",self.height)


      synheader0 = synheader(title="Your Title Here",author=getpass.getuser(),date=str(datetime.datetime.now()),descr="Your Description Here")
      headItem0 = headerItem(self.root)
      headItem0.setWorkflowAuthor(synheader0.getAuthor())
      headItem0.setWorkflowTitle(synheader0.getTitle())
      headItem0.setWorkflowCreationDate(synheader0.getDate())
      headItem0.setWorkflowDescr(synheader0.getDescr())
     
      


      self.header = linker(synheader0,headItem0)

         
      #construct new page
      scrolled_win.add(view_port)
      view_port.add(self.canvas)
      self.notebook.insert_page(scrolled_win,position=self.notebook.get_n_pages(),tab_label=self.head_hbox)
      self.notebook.get_nth_page(self.notebook.get_n_pages()-1).show()
      self.notebook.set_current_page(self.notebook.get_n_pages()-1)
      view_port.show()
      self.canvas.show()
      

   def getHeader(self):
      return self.header

   def setHeader(self,header):
      self.header = header
      
   def getCanvas(self):

      return self.canvas

   def getRootItem(self):

      return self.root


   #def changeCursor(self,cursor):

      #self.canvas.window.set_cursor(cursor)
   

   #def getItemsAt(self,x,y):

      #print x

      #self.cairo_context = self.canvas.create_cairo_context()

      #return self.rect.get_items_at(x,y,self.cairo_context,False,False)



   #def getObjectList(self):

      #return self.objectList

      
   #def setObjectList(self,objectList):

      #self.objectList = objectList


   #def addObject(self,obj):

      #self.objectList.append(obj)


class splashWindow(object):


   def start(self):

      self.window.hide()
      win1 = MainWindow()


   def __init__(self):

      builder = gtk.Builder()
      builder.add_from_file("%s/ui/splash.xml" % (RES_PATH))

      self.window = builder.get_object("window1")
      self.image = builder.get_object("image1")

      self.image.set_from_pixbuf(IMVEC.synapse_logo)

      self.window.set_decorated(False)
      self.window.show()
      


class aboutWindow(object):


   def start(self):

      self.window.hide()
      win1 = MainWindow()

   def getWindow(self):

      return self.window   

   def __init__(self):

      builder = gtk.Builder()
      builder.add_from_file("%s/ui/about.xml" % (RES_PATH))
      self.window = builder.get_object("window1")
 

      self.window.set_title("About...")

      self.image = builder.get_object("image1")
      self.image.set_from_pixbuf(IMVEC.synapse_logo)
   
      
class MainWindow(object):       

   TARGET_TYPE_TEXT = 80
   TARGET_TYPE_PIXMAP = 81
   fromImage = [ ( "text/plain", 0, TARGET_TYPE_TEXT ),
              ( "image/x-xpixmap", 0, TARGET_TYPE_PIXMAP ) ]
   toButton = [ ( "text/plain", 0, TARGET_TYPE_TEXT ) ]
   toCanvas = [ ( "image/x-xpixmap", 0, TARGET_TYPE_PIXMAP ) ]



   def on_key_press(self,widget,event):

      print event.keyval
      #object deletion
      if IMVEC.activeDoc.getActiveM() != None and event.keyval == 65535:
         
   
         #delete links coming in and out the object
         for mname, member in  IMVEC.activeDoc.getContainer().getMembers().items():
            
            if str(member.getSynObj().__class__) == "synapseObjects.synlink":
             
               if member.getSynObj().getInObj() == IMVEC.activeDoc.getActiveM().getSynObj():
                  IMVEC.activeDoc.getContainer().delete(member)
                  IMVEC.activeDoc.getRootItem().remove_child(member.getSynItem().getO())
                  
               elif member.getSynObj().getOutObj() == IMVEC.activeDoc.getActiveM().getSynObj():
                  IMVEC.activeDoc.getContainer().delete(member)
                  IMVEC.activeDoc.getRootItem().remove_child(member.getSynItem().getO())
                  

         #suppress all references to the object
         IMVEC.activeDoc.getActiveM().getSynItem().getO().remove()
         IMVEC.activeDoc.getContainer().delete(IMVEC.activeDoc.getActiveM())
         #IMVEC.activeDoc.getRootItem().remove_child(IMVEC.activeDoc.getActiveM().getSynItem().getO())
         


         IMVEC.activeDoc.getContainer().updatePeers()
         IMVEC.activeDoc.refresh_objects_list()


      elif event.keyval == 65307 and synapseCanvas.MAKE_LINE ==1:
         synapseCanvas.MAKE_LINE=0
         del synapseCanvas.NLPARAMETERS[:]

         for item in IMVEC.activeDoc.getContainer().getSynItems():
            try:
               item.changeInputsColor("#00CBFF")
            except:
               pass

         IMVEC.status_lbl.set_text("")
         
      


   def on_zoomlvl_change(self,widget):
  
      zoom_percent = self.zoom_lvl.get_active_text()          
      zoom_float = float(zoom_percent.rstrip('%')) / 100
      #zoom_float = 
      if (IMVEC.activeDoc != None):     

         IMVEC.activeDoc.setZoom(zoom_float)
         IMVEC.activeDoc.applyZoom()


   
   #Object browser cursor change callback
   def on_obrowser_cursor_changed(self,widget):
      selection = IMVEC.obrowser.get_selection()
      model, selection_iter = selection.get_selected()

      if (selection_iter):

         objectName = model.get_value(selection_iter,1)
         
         for obj in IMVEC.activeDoc.getContainer().getSynObjects():

            if objectName == obj.getName():
               member = IMVEC.activeDoc.getContainer().getMemberFromSynObj(obj)
               member.getSynItem().on_mf_clicked(None,None,None)
               member.getSynItem().objectSelectionChange(None,None,None)
               


   #Notebook page change callback
   def on_nb_page_change(self,widget,page,page_num):
      IMVEC.activeDoc = IMVEC.docList[page_num]
      if (IMVEC.activeDoc.getActiveM() != None):
         IMVEC.activeDoc.getActiveM().getSynObj().disconnectAll()
         for child in IMVEC.oprop.get_nth_page(0).get_children():
                  IMVEC.oprop.get_nth_page(0).remove(child)
         IMVEC.oprop.get_nth_page(0).add(IMVEC.activeDoc.getActiveM().getSynObj().getPropWidget())
      

      IMVEC.activeDoc.refresh_objects_list()
      


   #dnd send callback
   def sendCallback(self, widget, context, selection, targetType, eventTime):
      print "SENT"
      selection.set(selection.target, 8, "foo")
       


   def getRecursiveRoot(self,pickled_objects,root_dict,root_name):

      print root_name

      for  i in range (0, len(pickled_objects)) :

         pobj = pickled_objects[i]

         if pobj.getName() == root_name:

            print "found container"

            canvasProperties = list(pobj.getCanvasProperties())

            try:
               root = root_dict[canvasProperties[6]]
               print "containers root found"

            except:
               root = getRecursiveRoot(pickled_objects,root_dict,canvasProperties[6])

            newitem = containerItem(root)

            print "container created"

            newitem.getMF().set_property("width",canvasProperties[4])
            newitem.getMF().set_property("height",canvasProperties[5])
            newitem.getExtender().set_property("x",canvasProperties[4]-10)
            newitem.getExtender().set_property("y",canvasProperties[5]-10)

            newitem.setText(pobj.getName())
         

            newitem.getO().set_property("x",canvasProperties[0])
            newitem.getO().set_property("y",canvasProperties[1])
            newitem.getO().set_property("width",canvasProperties[2])
            newitem.getO().set_property("height",canvasProperties[3])
            
            if pobj.getColor() != "DEFAULT":
               newitem.getMF().set_property("fill_color",pobj.getColor())
               newitem.getLtext().set_property("fill_color",pobj.getColor())

            print "container properties added"
         
            nlinker = linker(pobj,newitem)

            IMVEC.activeDoc.getSyncontainersList().append(nlinker)         
            IMVEC.activeDoc.getContainer().append(nlinker)

            print "container added to lists"


            root_dict[root_name] = newitem.getO()
            del pickled_objects[i]
            return newitem.getO()
            break
         
      return None



   def loadDoc(self,filename):
   
      fh = open(filename,"r")
        
      pickled_objects = pickle.load(fh)

      docname = filename.split("/")[len(filename.split("/"))-1].rstrip(".sws")

      IMVEC.activeDoc = document(docname,self.notebook)
   

      root_dict = dict()
      root_dict['___root___'] = IMVEC.activeDoc.getRootItem() 


      docprops = pickled_objects[0] 
      del pickled_objects[0]

      nh = pickled_objects[0]   
      del pickled_objects[0]
      
      IMVEC.activeDoc.getHeader().setSynObj(nh)
      IMVEC.activeDoc.updateHeaderInfos()

      IMVEC.activeDoc.updateDocProperties(docprops)
      
     
      nbsynapp = 0
      nbsyntest = 0
      nbcomments = 0
      nbmuxers = 0
      nbdemuxers = 0
      nbinjectors = 0
      nbtimers = 0
      nbfilters = 0
      nbmonitors = 0
      nbservices = 0
      nbcontainers = 0
      nbreports = 0
      nblabels = 0

      
      for pobj in pickled_objects:

         newitem = None
         print str(pobj.__class__)
         canvasProperties = list(pobj.getCanvasProperties())

         try:

            root = root_dict[canvasProperties[6]]

         except:
            print "EXCEPT"
            root = self.getRecursiveRoot(pickled_objects,root_dict,canvasProperties[6])


         if str(pobj.__class__) == "synapseObjects.synapp":
            newitem = synappItem(root)
            nbsynapp += 1
     
         elif str(pobj.__class__) == "synapseObjects.syntest":
            newitem = testItem(root)
            nbsyntest += 1
     
         elif str(pobj.__class__) == "synapseObjects.syntimer":
            newitem = timerItem(root)
            nbtimers +=1
  
         elif str(pobj.__class__) == "synapseObjects.synjector":
            newitem = injectorItem(root)
            nbinjectors +=1

         elif str(pobj.__class__) == "synapseObjects.syncom":
            newitem = commentItem(root)
            newitem.getMF().set_property("width",canvasProperties[4])
            newitem.getMF().set_property("height",canvasProperties[5])
            newitem.getExtender().set_property("x",canvasProperties[4]-10)
            newitem.getExtender().set_property("y",canvasProperties[5]-10)

            newitem.setText(pobj.getText())
            nbcomments +=1

         elif str(pobj.__class__) == "synapseObjects.synmonitor":
            print "MONITOR ITEM ADDED"
            newitem = monitorItem(root)
            newitem.getMF().set_property("width",canvasProperties[4])
            newitem.getMF().set_property("height",canvasProperties[5])
            newitem.getWinBorder().set_property("width",canvasProperties[4])

            (hidebtn,maxbtn) = newitem.getButtons()
            hidebtn.set_property("x", canvasProperties[4] -40 )
            maxbtn.set_property("x",  canvasProperties[4] -20 )

            newitem.getExtender().set_property("x",canvasProperties[4]-10)
            newitem.getExtender().set_property("y",canvasProperties[5]-10)
            nbmonitors +=1

         elif str(pobj.__class__) == "synapseObjects.synserv":
            print "SERVICE ITEM ADDED"
            newitem = servItem(root)
            nbservices +=1

         elif str(pobj.__class__) == "synapseObjects.syndemux":
            print "DEMUX ITEM ADDED"
            newitem = demuxItem(root)
            nbdemuxers +=1
         elif str(pobj.__class__) == "synapseObjects.synmux":
            print "MUX ITEM ADDED"
            newitem = muxItem(root)
            nbmuxers +=1
     
         elif str(pobj.__class__) == "synapseObjects.synfilter":
            print "FILTER ITEM ADDED"
            newitem = filterItem(root)
            nbfilters +=1


         elif str(pobj.__class__) == "synapseObjects.syncontainer":

            newitem = containerItem(root)
            newitem.getMF().set_property("width",canvasProperties[4])
            newitem.getMF().set_property("height",canvasProperties[5])
            newitem.getExtender().set_property("x",canvasProperties[4]-10)
            newitem.getExtender().set_property("y",canvasProperties[5]-10)

            newitem.setText(pobj.getName())
            nbcontainers +=1
            IMVEC.activeDoc.getSyncontainersList().append(linker(pobj,newitem))

         elif str(pobj.__class__) == "synapseObjects.synreport":
            print "REPORT ITEM ADDED"
            newitem = reportItem(root)
            nbreports +=1

         elif str(pobj.__class__) == "synapseObjects.synlabel":

            pobj.setContent("")
            newitem = labelItem(root)
            nblabels +=1


         if (newitem != None):
            newitem.getO().set_property("x",canvasProperties[0])
            newitem.getO().set_property("y",canvasProperties[1])
            newitem.getO().set_property("width",canvasProperties[2])
            newitem.getO().set_property("height",canvasProperties[3])
            
            if str(pobj.__class__) != "synapseObjects.syncom" and str(pobj.__class__) != "synapseObjects.synmonitor":
               newitem.setText(pobj.getName())


            if pobj.getColor() != "DEFAULT":
               newitem.getMF().set_property("fill_color",pobj.getColor())
               if str(pobj.__class__) != "synapseObjects.syncom":
                  newitem.getLtext().set_property("fill_color",pobj.getColor())
                  
            IMVEC.activeDoc.getContainer().append(linker(pobj,newitem))

         

           
            
      #remaking loop to create links
      for pobj in pickled_objects:
  
         if str(pobj.__class__) == "synapseObjects.synlink":
            
            outitem = IMVEC.activeDoc.getContainer().getMemberFromSynObj(  pobj.getOutObj() ).getSynItem()
            initem =  IMVEC.activeDoc.getContainer().getMemberFromSynObj(  pobj.getInObj()  ).getSynItem() 
            inp = initem.getInput(pobj.getInputNum())
            outp = outitem.getOutput(pobj.getOutputNum())
            newitem = linkItem(root_dict['___root___'],outitem,outp,initem,inp)
            newitem.update()            
            IMVEC.linkList.append(newitem)
            IMVEC.activeDoc.getContainer().append(linker(pobj,newitem))
            if pobj.getBidir():
               newitem.getMF().set_property("stroke_color","#00cbff")
               pobj.setDirection()


      IMVEC.activeDoc.refresh_objects_list()

      nbinsts = (nbsynapp,nbsyntest,nbcomments,nbmuxers,nbdemuxers,nbinjectors,
      nbtimers,nbfilters,nbmonitors,nbservices)
      IMVEC.activeDoc.setnbInsts(nbinsts)

      

   def woiWatchThread(self):

      while(self.woiWatchAlive):

         for obj in self.woiObjects:

            if obj.getIbuff() != "" and not obj.isRunning() :

               th0 = thwrapper()
               th0.setMethod(obj.run)
               th0.start()
               print "thread for object", obj, "started"
               
         time.sleep(0.001)
      




   #button clicked callback
   def on_button_clicked(self,widget):


      if widget == self.b2f_btn:

         if ( IMVEC.activeDoc.getActiveM() != None):
            IMVEC.activeDoc.getActiveM().getSynItem().getO().raise_(None)

      if widget == self.s2b_btn:

         if ( IMVEC.activeDoc.getActiveM() != None):

            for member in IMVEC.activeDoc.getContainer().getSynItems():

               if  IMVEC.activeDoc.getActiveM().getSynItem() != member:
                  member.getO().raise_(None)
      
      



      if widget == self.stop_btn:
  
         self.stopWorkflow()         


      if widget == self.play_btn:
   
         self.playWorkflow()                      


      if widget == self.zoomin_btn:
         IMVEC.activeDoc.zoomIn()
         return 0
      if widget == self.zoomout_btn:
         IMVEC.activeDoc.zoomOut()
         return 0
      if widget == self.newdoc_btn:

         self.createNewDoc()

      if widget == self.synapp_btn:
         return True      


      if widget == self.loaddoc_btn:

         self.startLoad()

      
      if widget == self.savedoc_btn:

         self.startSave()


   def playWorkflow(self):

      self.woiObjects = list()

      if (IMVEC.running == False):
      #define a boolean executable attr for synObjects to avoid repeted and ...

         for obj in IMVEC.activeDoc.getContainer().getSynObjects():
            if (str(obj.__class__) == "dummy"):
               obj.run()
               print "starting APP", obj
            elif (str(obj.__class__) != "synapseObjects.syncom") \
            and (str(obj.__class__) != "synapseObjects.synlink") \
            and (str(obj.__class__) != "synapseObjects.syncontainer") \
            and (obj.getWOI() == False):
               th0 = thwrapper()
               th0.setMethod(obj.run)
               th0.start()
               print "thread for object", obj, "started"
            elif (str(obj.__class__) != "synapseObjects.syncom") \
            and (str(obj.__class__) != "synapseObjects.synlink") \
            and (str(obj.__class__) != "synapseObjects.syncontainer") \
            and (obj.getWOI() == True):
               self.woiObjects.append(obj)

         if len(self.woiObjects) != 0:
            th1 = thwrapper()
            th1.setMethod(self.woiWatchThread)
            self.woiWatchAlive = True
            th1.start()
            print "thread for WOI Watcher started"
        
         IMVEC.running = True    




   def stopWorkflow(self):

         try:
            if self.woiWatchAlive:
               print "stopping watch thread"
               self.woiWatchAlive = False
         except:
            pass


         for obj in IMVEC.activeDoc.getContainer().getSynObjects():
            if (str(obj.__class__) != "synapseObjects.syncom") \
            and (str(obj.__class__) != "synapseObjects.synlink") \
            and (str(obj.__class__) != "synapseObjects.syncontainer"):
               if (obj.isRunning()):
                  print "stopping thread for object", obj
                  obj.kill()
               if (str(obj.__class__) == "synapseObjects.synmonitor"):
                  IMVEC.activeDoc.getContainer().getMemberFromSynObj(obj).getSynItem().flush()
         
         IMVEC.running = False


   def startLoad(self):

      loadfile = ""

      dialog = gtk.FileChooserDialog(title="Choose a Workflow file to load", parent=None, action=gtk.FILE_CHOOSER_ACTION_OPEN, buttons=(gtk.STOCK_CANCEL,gtk.RESPONSE_CANCEL,gtk.STOCK_OPEN,gtk.RESPONSE_OK), backend=None)

      filter = gtk.FileFilter()
      filter.set_name("Synapse Workflow Scheme")
      filter.add_pattern("*.sws")
      dialog.add_filter(filter)

      response = dialog.run()
      if response == gtk.RESPONSE_OK:
         loadfile = dialog.get_filename()
         dialog.destroy()
         self.loadDoc(loadfile)
      elif response == gtk.RESPONSE_CANCEL:
         dialog.destroy()





   def startSave(self):

          dialog = gtk.FileChooserDialog(title="Save as...", parent=None, action=gtk.FILE_CHOOSER_ACTION_SAVE, buttons=    
          (gtk.STOCK_CANCEL,gtk.RESPONSE_CANCEL,gtk.STOCK_SAVE,gtk.RESPONSE_OK), backend=None)
          response = dialog.run()
          if response == gtk.RESPONSE_OK:
            savefile = dialog.get_filename()

            if (savefile.rstrip('.sws') == savefile):
               savefile += ".sws"

            dialog.destroy()
          
            #try:
            fh = open(savefile,"w+")
            pickled_objects = list()    

            
            pickled_objects.append((IMVEC.activeDoc.getColor(),IMVEC.activeDoc.getWidth(),IMVEC.activeDoc.getHeight()))

            pickled_objects.append(IMVEC.activeDoc.getHeader().getSynObj())

            for mname,member in IMVEC.activeDoc.getContainer().getMembers().items():
               
                  member.updateSynObjCanvasProperties()
                  pickled_objects.append(member.getSynObj())
            pickle.dump(pickled_objects,fh)

            #except:
               #return

            savedName = savefile.split("/").pop().rstrip('.sws')
            IMVEC.activeDoc.setSavedName(savedName)
            IMVEC.activeDoc.setHeadLabel(savedName)


          elif response == gtk.RESPONSE_CANCEL:
             dialog.destroy()
             return


   def createNewDoc(self):

      document.nbnewinst+=1
      #IMVEC.docList.append(document("new-workflow-%d" % document.nbnewinst,self.notebook))
      document("new-workflow-%d" % document.nbnewinst,self.notebook)
      IMVEC.activeDoc = IMVEC.docList[len(IMVEC.docList)-1]
            
   #Fix boundaries on horizontal panes.
   def on_hpaned_resize(self,widget,allocation):

      if (widget == self.hpaned2):

         if (self.hpaned2.get_position() < 160):
            self.hpaned2.set_position(160)

         if (self.hpaned2.get_position() > 300):
            self.hpaned2.set_position(300)

      if (widget == self.hpaned1):

         if (self.hpaned1.get_position() < self.window.get_size()[0] - 300):
            self.hpaned1.set_position(self.window.get_size()[0] - 300)



   def on_menu_activate(self,widget):

      if widget == self.menu_new:

        self.createNewDoc()

      elif widget == self.menu_open:

         self.startLoad()
      

      elif widget == self.menu_close:


         self.notebook.remove_page(self.notebook.get_current_page())


      elif widget == self.menu_about:

         win = aboutWindow()
         win.getWindow().show()

      elif widget == self.menu_play:

         self.playWorkflow()

      elif widget == self.menu_stop:
         self.stopWorkflow()

      elif widget == self.menu_zoomout:
         IMVEC.activeDoc.zoomOut()

      elif widget == self.menu_zoomin:
         IMVEC.activeDoc.zoomIn()      




   def __init__(self):
        
      global LS0

      builder = gtk.Builder()
      builder2 = gtk.Builder()      

      builder.add_from_file("%s/ui/main.xml" % (RES_PATH))
    
      self.window = builder.get_object("window1")


     
      mb = builder.get_object("menubar1")

      agr = gtk.AccelGroup()
      self.window.add_accel_group(agr)


      filemenu = gtk.Menu()
      filemenu.show()      



      self.menu_new = gtk.ImageMenuItem(gtk.STOCK_NEW, agr)
      key, mod = gtk.accelerator_parse("<ctrl>N")
      self.menu_new.add_accelerator("activate", agr, key, 
      mod, gtk.ACCEL_VISIBLE)

      self.menu_new.connect("activate",self.on_menu_activate)
      self.menu_new.show()

      filemenu.append(self.menu_new)



      self.menu_open = gtk.ImageMenuItem(gtk.STOCK_OPEN, agr)
      key, mod = gtk.accelerator_parse("<ctrl>O")
      self.menu_open.add_accelerator("activate", agr, key, 
      mod, gtk.ACCEL_VISIBLE)
      self.menu_open.connect("activate",self.on_menu_activate)
      self.menu_open.show()
      filemenu.append(self.menu_open)

      sep0_0 = gtk.SeparatorMenuItem()
      sep0_0.show()
      filemenu.append(sep0_0)

      self.menu_save = gtk.ImageMenuItem(gtk.STOCK_SAVE, agr)
      key, mod = gtk.accelerator_parse("<ctrl>S")
      self.menu_save.add_accelerator("activate", agr, key, 
      mod, gtk.ACCEL_VISIBLE)
      self.menu_save.connect("activate",self.on_menu_activate)
      self.menu_save.show()
      filemenu.append(self.menu_save)



      self.menu_saveas = gtk.ImageMenuItem(gtk.STOCK_SAVE_AS, agr)
      key, mod = gtk.accelerator_parse("<ctrl><shift>S")
      self.menu_saveas.add_accelerator("activate", agr, key, 
      mod, gtk.ACCEL_VISIBLE)
      self.menu_saveas.connect("activate",self.on_menu_activate)
      self.menu_saveas.show()
      filemenu.append(self.menu_saveas)





      sep0_1 = gtk.SeparatorMenuItem()
      sep0_1.show()
      filemenu.append(sep0_1)


      self.menu_close = gtk.ImageMenuItem(gtk.STOCK_CLOSE, agr)
      key, mod = gtk.accelerator_parse("<ctrl>W")
      self.menu_close.add_accelerator("activate", agr, key, 
      mod, gtk.ACCEL_VISIBLE)
      self.menu_close.connect("activate",self.on_menu_activate)
      self.menu_close.show()
      filemenu.append(self.menu_close)


      menu_quit = gtk.ImageMenuItem(gtk.STOCK_QUIT, agr)
      key, mod = gtk.accelerator_parse("<ctrl>Q")
      menu_quit.add_accelerator("activate", agr, key, 
      mod, gtk.ACCEL_VISIBLE)
      menu_quit.connect("activate",gtk.main_quit)
      menu_quit.show()
      filemenu.append(menu_quit)


      editmenu = gtk.Menu()
      editmenu.show()

      self.menu_undo = gtk.ImageMenuItem(gtk.STOCK_UNDO, agr)
      key, mod = gtk.accelerator_parse("<ctrl>Z")
      self.menu_undo.add_accelerator("activate", agr, key, 
      mod, gtk.ACCEL_VISIBLE)
      self.menu_undo.connect("activate",self.on_menu_activate)
      self.menu_undo.show()
      editmenu.append(self.menu_undo)


      self.menu_redo = gtk.ImageMenuItem(gtk.STOCK_REDO, agr)
      key, mod = gtk.accelerator_parse("<ctrl><shift>Z")
      self.menu_redo.add_accelerator("activate", agr, key, 
      mod, gtk.ACCEL_VISIBLE)
      self.menu_redo.connect("activate",self.on_menu_activate)
      self.menu_redo.show()
      editmenu.append(self.menu_redo)


      sep1 = gtk.SeparatorMenuItem()
      sep1.show()
      editmenu.append(sep1)
      

      self.menu_cut = gtk.ImageMenuItem(gtk.STOCK_CUT, agr)
      key, mod = gtk.accelerator_parse("<ctrl>X")
      self.menu_cut.add_accelerator("activate", agr, key, 
      mod, gtk.ACCEL_VISIBLE)
      self.menu_cut.connect("activate",self.on_menu_activate)
      self.menu_cut.show()
      editmenu.append(self.menu_cut)


      self.menu_copy = gtk.ImageMenuItem(gtk.STOCK_COPY, agr)
      key, mod = gtk.accelerator_parse("<ctrl>C")
      self.menu_copy.add_accelerator("activate", agr, key, 
      mod, gtk.ACCEL_VISIBLE)
      self.menu_copy.connect("activate",self.on_menu_activate)
      self.menu_copy.show()
      editmenu.append(self.menu_copy)


      self.menu_paste = gtk.ImageMenuItem(gtk.STOCK_PASTE, agr)
      key, mod = gtk.accelerator_parse("<ctrl>V")
      self.menu_paste.add_accelerator("activate", agr, key, 
      mod, gtk.ACCEL_VISIBLE)
      self.menu_paste.connect("activate",self.on_menu_activate)
      self.menu_paste.show()
      editmenu.append(self.menu_paste)



      wfmenu = gtk.Menu()
      wfmenu.show()

      self.menu_play = gtk.MenuItem("Play", agr)
      key, mod = gtk.accelerator_parse("<ctrl>P")
      self.menu_play.add_accelerator("activate", agr, key, 
      mod, gtk.ACCEL_VISIBLE)
      self.menu_play.connect("activate",self.on_menu_activate)
      self.menu_play.show()
      wfmenu.append(self.menu_play)


      self.menu_stop = gtk.MenuItem("Stop", agr)
      key, mod = gtk.accelerator_parse("<ctrl>M")
      self.menu_stop.add_accelerator("activate", agr, key, 
      mod, gtk.ACCEL_VISIBLE)
      self.menu_stop.connect("activate",self.on_menu_activate)
      self.menu_stop.show()
      wfmenu.append(self.menu_stop)



      viewmenu = gtk.Menu()
      viewmenu.show()
      
      self.menu_zoomout = gtk.MenuItem("Zoom Out", agr)
      key, mod = gtk.accelerator_parse("<ctrl>I")
      self.menu_zoomout.add_accelerator("activate", agr, key, 
      mod, gtk.ACCEL_VISIBLE)
      self.menu_zoomout.connect("activate",self.on_menu_activate)
      self.menu_zoomout.show()
      viewmenu.append(self.menu_zoomout)


      self.menu_zoomin = gtk.MenuItem("Zoom In", agr)
      key, mod = gtk.accelerator_parse("<ctrl>K")
      self.menu_zoomin.add_accelerator("activate", agr, key, 
      mod, gtk.ACCEL_VISIBLE)
      self.menu_zoomin.connect("activate",self.on_menu_activate)
      self.menu_zoomin.show()
      viewmenu.append(self.menu_zoomin)



      helpmenu = gtk.Menu()
      helpmenu.show()  


      self.menu_about = gtk.ImageMenuItem(gtk.STOCK_ABOUT, agr)
      self.menu_about.connect("activate",self.on_menu_activate)
      self.menu_about.show()
      helpmenu.append(self.menu_about)


      filem = gtk.MenuItem("_File")
      editm = gtk.MenuItem("_Edit")
      viewm = gtk.MenuItem("_View")
      wfm = gtk.MenuItem("_Workflow")
      helpm = gtk.MenuItem("_Help")
      
     
      filem.set_submenu(filemenu)
      filem.show()

      editm.set_submenu(editmenu)
      editm.show()

      wfm.set_submenu(wfmenu)
      wfm.show()
      
      helpm.set_submenu(helpmenu)
      helpm.show()


      viewm.set_submenu(viewmenu)
      viewm.show()


      mb.append(filem)
      mb.append(editm)
      mb.append(viewm)
      mb.append(wfm)
      mb.append(helpm)

      self.hpaned1 = builder.get_object("hpaned1")
      self.hpaned2 = builder.get_object("hpaned2")
      self.vpaned1 = builder.get_object("vpaned1")

      self.zoom_lvl = builder.get_object("zoom_lvl")

      self.newdoc_btn = builder.get_object("newdoc_btn")
      self.loaddoc_btn = builder.get_object("loaddoc_btn")
      self.savedoc_btn = builder.get_object("savedoc_btn")

      self.play_btn = builder.get_object("play_btn")
      self.stop_btn = builder.get_object("stop_btn")

      self.b2f_btn = builder.get_object("b2f_btn")
      self.s2b_btn = builder.get_object("s2b_btn")

      self.synapp_btn = builder.get_object("synapp_btn")
      self.synapp_img = builder.get_object("synapp_img")
      self.synapp_img.set_from_pixbuf(IMVEC.appPixbuf)

      self.syntest_btn = builder.get_object("syntest_btn")      
      self.syntest_img = builder.get_object("syntest_img")
      self.syntest_img.set_from_pixbuf(IMVEC.testPixbuf)

      self.syncom_btn = builder.get_object("syncom_btn")
      self.syncom_img = builder.get_object("syncom_img")
      self.syncom_img.set_from_pixbuf(IMVEC.commentPixbuf)      

      self.synmux_btn = builder.get_object("synmux_btn")
      self.synmux_img = builder.get_object("synmux_img")
      self.synmux_img.set_from_pixbuf(IMVEC.muxPixbuf)

      self.syndemux_btn = builder.get_object("syndemux_btn")
      self.syndemux_img = builder.get_object("syndemux_img")
      self.syndemux_img.set_from_pixbuf(IMVEC.demuxPixbuf)
      
      self.syntimer_btn = builder.get_object("syntimer_btn")     
      self.syntimer_img = builder.get_object("syntimer_img")
      self.syntimer_img.set_from_pixbuf(IMVEC.timerPixbuf)

      self.synmon_btn = builder.get_object("synmon_btn")
      self.synmon_img = builder.get_object("synmon_img")
      self.synmon_img.set_from_pixbuf(IMVEC.monitorPixbuf)

      self.synfilter_btn = builder.get_object("synfilter_btn")
      self.synfilter_img = builder.get_object("synfilter_img")
      self.synfilter_img.set_from_pixbuf(IMVEC.filterPixbuf)

      self.synserv_btn = builder.get_object("synserv_btn")
      self.synserv_img = builder.get_object("synserv_img")
      self.synserv_img.set_from_pixbuf(IMVEC.servPixbuf)

      self.synject_btn = builder.get_object("synject_btn")
      self.synject_img = builder.get_object("synject_img")
      self.synject_img.set_from_pixbuf(IMVEC.injectorPixbuf)

      self.syncontainer_btn = builder.get_object("syncontainer_btn")
      self.syncontainer_img = builder.get_object("syncontainer_img")
      self.syncontainer_img.set_from_pixbuf(IMVEC.containerPixbuf)


      self.synreport_btn = builder.get_object("synreport_btn")
      self.synreport_img = builder.get_object("synreport_img")
      self.synreport_img.set_from_pixbuf(IMVEC.reportPixbuf)


      self.synlabel_btn = builder.get_object("synlabel_btn")
      self.synlabel_img = builder.get_object("synlabel_img")
      self.synlabel_img.set_from_pixbuf(IMVEC.labelPixbuf)
      

      try:

         from reportlab.pdfgen import canvas
         from reportlab.lib.units import inch

      except:
         print "reportlab not found, disabling PDF reporting..."
         self.synreport_btn.hide()


      self.zoomin_btn = builder.get_object("zoomin_btn")
      self.zoomout_btn = builder.get_object("zoomout_btn")

      self.obrowser = builder.get_object("obrowser")     
      
      pkgMgr = pkgManager()
      IMVEC.pkgMgr = pkgMgr
      self.libtree = builder.get_object("libtree")
      IMVEC.libtree = self.libtree
      IMVEC.libtree.set_model(IMVEC.pkgMgr.getTreeStore())
      IMVEC.libtree.set_headers_visible(False)
      
      
      tvcell0 = gtk.CellRendererPixbuf()
      tvcell1 = gtk.CellRendererText()
      
      tvcolumn0 = gtk.TreeViewColumn('Img', tvcell0,pixbuf=0)
      tvcolumn1 = gtk.TreeViewColumn('Lib', tvcell1,text=1)
      
      tvcolumn0.set_cell_data_func(tvcell0,IMVEC.pkgMgr.setColumnPixbuf,data=None)
      tvcolumn1.set_cell_data_func(tvcell1,IMVEC.pkgMgr.setColumnStr,data=None)
      

      IMVEC.libtree.append_column(tvcolumn0)
      IMVEC.libtree.append_column(tvcolumn1)

      self.status_lbl = builder.get_object("status_lbl")
      IMVEC.status_lbl = self.status_lbl

      ls = gtk.ListStore(str)

      self.zoom_lvl.set_model(ls)
      cellr = gtk.CellRendererText()
      self.zoom_lvl.pack_start(cellr)
      self.zoom_lvl.add_attribute(cellr, 'text', 0)
      
      self.zoom_lvl.append_text("25%")
      self.zoom_lvl.append_text("50%")
      self.zoom_lvl.append_text("100%")
      self.zoom_lvl.append_text("200%")
      self.zoom_lvl.append_text("400%")      


      self.zoom_lvl.set_active(2)

      self.zoom_lvl.connect("changed",self.on_zoomlvl_change)


      IMVEC.obrowser = self.obrowser  
      IMVEC.obrowser.set_model(LS0)
      
      self.obrowser.connect("cursor-changed",self.on_obrowser_cursor_changed)
      

      self.window.resize(1024,768)
      
 
      self.window.connect("destroy", lambda w: gtk.main_quit())

      self.hpaned1.connect("size-allocate",self.on_hpaned_resize)
      self.hpaned2.connect("size-allocate",self.on_hpaned_resize)


      self.newdoc_btn.connect("clicked",self.on_button_clicked)
      self.synapp_btn.connect("clicked",self.on_button_clicked)
      self.loaddoc_btn.connect("clicked",self.on_button_clicked)
      self.savedoc_btn.connect("clicked",self.on_button_clicked)
      self.play_btn.connect("clicked",self.on_button_clicked)
      self.stop_btn.connect("clicked",self.on_button_clicked)
      self.b2f_btn.connect("clicked",self.on_button_clicked)
      self.s2b_btn.connect("clicked",self.on_button_clicked)


      self.zoomin_btn.connect("clicked",self.on_button_clicked)
      self.zoomout_btn.connect("clicked",self.on_button_clicked)


      self.synapp_btn.connect("drag_data_get", self.sendCallback)
      self.synapp_btn.drag_source_set(gtk.gdk.BUTTON1_MASK, self.fromImage,
                               gtk.gdk.ACTION_COPY)

      self.syntest_btn.connect("drag_data_get", self.sendCallback)
      self.syntest_btn.drag_source_set(gtk.gdk.BUTTON1_MASK, self.fromImage,
                               gtk.gdk.ACTION_COPY)


      self.synfilter_btn.connect("drag_data_get", self.sendCallback)
      self.synfilter_btn.drag_source_set(gtk.gdk.BUTTON1_MASK, self.fromImage,
                               gtk.gdk.ACTION_COPY)

      self.syncom_btn.connect("drag_data_get", self.sendCallback)
      self.syncom_btn.drag_source_set(gtk.gdk.BUTTON1_MASK, self.fromImage,
                               gtk.gdk.ACTION_COPY)


      self.synmux_btn.connect("drag_data_get", self.sendCallback)
      self.synmux_btn.drag_source_set(gtk.gdk.BUTTON1_MASK, self.fromImage,
                               gtk.gdk.ACTION_COPY)


      self.syndemux_btn.connect("drag_data_get", self.sendCallback)
      self.syndemux_btn.drag_source_set(gtk.gdk.BUTTON1_MASK, self.fromImage,
                               gtk.gdk.ACTION_COPY)


      self.syntimer_btn.connect("drag_data_get", self.sendCallback)
      self.syntimer_btn.drag_source_set(gtk.gdk.BUTTON1_MASK, self.fromImage,
                               gtk.gdk.ACTION_COPY)

      self.synserv_btn.connect("drag_data_get", self.sendCallback)
      self.synserv_btn.drag_source_set(gtk.gdk.BUTTON1_MASK, self.fromImage,
                               gtk.gdk.ACTION_COPY)


      self.synject_btn.connect("drag_data_get", self.sendCallback)
      self.synject_btn.drag_source_set(gtk.gdk.BUTTON1_MASK, self.fromImage,
                               gtk.gdk.ACTION_COPY)

      self.synmon_btn.connect("drag_data_get", self.sendCallback)
      self.synmon_btn.drag_source_set(gtk.gdk.BUTTON1_MASK, self.fromImage,
                               gtk.gdk.ACTION_COPY)

      self.syncontainer_btn.connect("drag_data_get", self.sendCallback)
      self.syncontainer_btn.drag_source_set(gtk.gdk.BUTTON1_MASK, self.fromImage,
                               gtk.gdk.ACTION_COPY)

      self.synreport_btn.connect("drag_data_get", self.sendCallback)
      self.synreport_btn.drag_source_set(gtk.gdk.BUTTON1_MASK, self.fromImage,
                               gtk.gdk.ACTION_COPY)


      self.synlabel_btn.connect("drag_data_get", self.sendCallback)
      self.synlabel_btn.drag_source_set(gtk.gdk.BUTTON1_MASK, self.fromImage,
                               gtk.gdk.ACTION_COPY)


      self.synapp_btn.set_name("synapp_btn")
      self.syntest_btn.set_name("syntest_btn")
      self.syncom_btn.set_name("syncom_btn")
      self.synmux_btn.set_name("synmux_btn")
      self.syndemux_btn.set_name("syndemux_btn")

      self.syntimer_btn.set_name("syntimer_btn")
      self.synmon_btn.set_name("synmon_btn")
      self.synfilter_btn.set_name("synfilter_btn")
      self.synserv_btn.set_name("synserv_btn")
      self.synject_btn.set_name("synject_btn")

      self.syncontainer_btn.set_name("syncontainer_btn")
      self.synreport_btn.set_name("synreport_btn")
      self.synlabel_btn.set_name("synlabel_btn")


      self.hpaned1.set_position(800)
      self.vpaned1.set_position(250)

        
      self.notebook = builder.get_object("notebook1")
      self.notebook.remove_page(1)
      self.notebook.remove_page(1)
      self.notebook.remove_page(0)
      self.notebook.connect("switch-page",self.on_nb_page_change)


      self.oprop = builder.get_object("oprop")
      self.oprop.remove_page(1)
      IMVEC.oprop = self.oprop 
      
      document.nbnewinst+=1
      #IMVEC.docList.append(document("new-workflow-%d" % document.nbnewinst,self.notebook))
      document("new-workflow-%d" % document.nbnewinst,self.notebook)
      IMVEC.activeDoc = IMVEC.docList[len(IMVEC.docList)-1]


      self.window.connect("key-press-event",self.on_key_press)

      self.window.show()
      

if __name__ == "__main__":
   

   #gtk.rc_parse('/usr/share/themes/Murrina-Charcoal/gtk-2.0/gtkrc')

   os.chdir(RES_PATH)

   win0 = splashWindow()

   gobject.timeout_add(2000, win0.start)

   os.chdir(os.path.expanduser("~"))
       
   gtk.gdk.threads_init()
   gtk.main()



#####################
